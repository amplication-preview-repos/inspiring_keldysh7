/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MovieService } from "../movie.service";
import { MovieCreateInput } from "./MovieCreateInput";
import { Movie } from "./Movie";
import { MovieFindManyArgs } from "./MovieFindManyArgs";
import { MovieWhereUniqueInput } from "./MovieWhereUniqueInput";
import { MovieUpdateInput } from "./MovieUpdateInput";
import { ReviewFindManyArgs } from "../../review/base/ReviewFindManyArgs";
import { Review } from "../../review/base/Review";
import { ReviewWhereUniqueInput } from "../../review/base/ReviewWhereUniqueInput";

export class MovieControllerBase {
  constructor(protected readonly service: MovieService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Movie })
  async createMovie(@common.Body() data: MovieCreateInput): Promise<Movie> {
    return await this.service.createMovie({
      data: {
        ...data,

        genre: data.genre
          ? {
              connect: data.genre,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,

        genre: {
          select: {
            id: true,
          },
        },

        id: true,
        movieDescription: true,
        movieDescriptionX1: true,
        movieGenre: true,
        movieRating: true,
        movieRatingX1: true,
        movieReleaseDate: true,
        movieReleaseDateX1: true,
        movieTitle: true,
        posterUrl: true,
        rating: true,
        releaseDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Movie] })
  @ApiNestedQuery(MovieFindManyArgs)
  async movies(@common.Req() request: Request): Promise<Movie[]> {
    const args = plainToClass(MovieFindManyArgs, request.query);
    return this.service.movies({
      ...args,
      select: {
        createdAt: true,
        description: true,

        genre: {
          select: {
            id: true,
          },
        },

        id: true,
        movieDescription: true,
        movieDescriptionX1: true,
        movieGenre: true,
        movieRating: true,
        movieRatingX1: true,
        movieReleaseDate: true,
        movieReleaseDateX1: true,
        movieTitle: true,
        posterUrl: true,
        rating: true,
        releaseDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Movie })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async movie(
    @common.Param() params: MovieWhereUniqueInput
  ): Promise<Movie | null> {
    const result = await this.service.movie({
      where: params,
      select: {
        createdAt: true,
        description: true,

        genre: {
          select: {
            id: true,
          },
        },

        id: true,
        movieDescription: true,
        movieDescriptionX1: true,
        movieGenre: true,
        movieRating: true,
        movieRatingX1: true,
        movieReleaseDate: true,
        movieReleaseDateX1: true,
        movieTitle: true,
        posterUrl: true,
        rating: true,
        releaseDate: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Movie })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMovie(
    @common.Param() params: MovieWhereUniqueInput,
    @common.Body() data: MovieUpdateInput
  ): Promise<Movie | null> {
    try {
      return await this.service.updateMovie({
        where: params,
        data: {
          ...data,

          genre: data.genre
            ? {
                connect: data.genre,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,

          genre: {
            select: {
              id: true,
            },
          },

          id: true,
          movieDescription: true,
          movieDescriptionX1: true,
          movieGenre: true,
          movieRating: true,
          movieRatingX1: true,
          movieReleaseDate: true,
          movieReleaseDateX1: true,
          movieTitle: true,
          posterUrl: true,
          rating: true,
          releaseDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Movie })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMovie(
    @common.Param() params: MovieWhereUniqueInput
  ): Promise<Movie | null> {
    try {
      return await this.service.deleteMovie({
        where: params,
        select: {
          createdAt: true,
          description: true,

          genre: {
            select: {
              id: true,
            },
          },

          id: true,
          movieDescription: true,
          movieDescriptionX1: true,
          movieGenre: true,
          movieRating: true,
          movieRatingX1: true,
          movieReleaseDate: true,
          movieReleaseDateX1: true,
          movieTitle: true,
          posterUrl: true,
          rating: true,
          releaseDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/reviews")
  @ApiNestedQuery(ReviewFindManyArgs)
  async findReviews(
    @common.Req() request: Request,
    @common.Param() params: MovieWhereUniqueInput
  ): Promise<Review[]> {
    const query = plainToClass(ReviewFindManyArgs, request.query);
    const results = await this.service.findReviews(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,
        id: true,

        movie: {
          select: {
            id: true,
          },
        },

        movieReviewed: true,
        rating: true,
        reviewContent: true,
        reviewedMovie: true,
        reviewer: true,
        reviewRating: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        userReviewer: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reviews")
  async connectReviews(
    @common.Param() params: MovieWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        connect: body,
      },
    };
    await this.service.updateMovie({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reviews")
  async updateReviews(
    @common.Param() params: MovieWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        set: body,
      },
    };
    await this.service.updateMovie({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reviews")
  async disconnectReviews(
    @common.Param() params: MovieWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        disconnect: body,
      },
    };
    await this.service.updateMovie({
      where: params,
      data,
      select: { id: true },
    });
  }
}
